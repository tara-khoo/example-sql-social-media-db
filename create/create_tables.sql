-- ACCOUNTS TABLE
-- Table for registration information 
-- Check each account has one form of contact information 

CREATE TABLE Accounts(
ACCOUNT_ID INT(7) PRIMARY KEY AUTO_INCREMENT, 
EMAIL VARCHAR(30) UNIQUE, 
PHONE CHAR(11) UNIQUE, 
BIRTHDAY DATE NOT NULL
);

ALTER TABLE Accounts
ADD CONSTRAINT REGISTRATION_INFO 
CHECK (EMAIL IS NOT NULL OR PHONE IS NOT NULL);

-- MEDIA TABLE
-- Table for media uploaded by users
-- Check media type is either 'PHOTO', 'VIDEO', ;'GIF'

CREATE TABLE Media (
MEDIA_ID INT(10) PRIMARY KEY AUTO_INCREMENT, 
MEDIA_AUTHOR_ID INT(7) NOT NULL, 
MEDIA_TYPE VARCHAR(5) NOT NULL, 
MEDIA_UPLOAD_TIME TIME,
MEDIA_UPLOAD_DATE DATE,
FOREIGN KEY (MEDIA_AUTHOR_ID) REFERENCES Accounts(ACCOUNT_ID)
);

ALTER TABLE Media
ADD CONSTRAINT MEDIA_TYPES
CHECK (MEDIA_TYPE = 'PHOTO' OR MEDIA_TYPE = 'VIDEO' OR MEDIA_TYPE = 'GIF');

-- POSTS TABLE
-- Table for posts made by users
-- Check post type is either 'REPLY' or 'ORIGINAL' 

CREATE TABLE Posts (
POST_ID INT(10) PRIMARY KEY AUTO_INCREMENT, 
POST_AUTHOR_ID INT(7) NOT NULL, 
POST_TYPE VARCHAR(10) NOT NULL, 
POST_TIME TIME NOT NULL, 
POST_DATE DATE NOT NULL, 
MENTIONED_USER_ID INT(7),
MEDIA_ID INT(10), 

FOREIGN KEY (MENTIONED_USER_ID) REFERENCES Accounts(ACCOUNT_ID), 
FOREIGN KEY (MEDIA_ID) REFERENCES Media(MEDIA_ID)
); 

ALTER TABLE Posts 
ADD CONSTRAINT POST_TYPE
CHECK (POST_TYPE = 'REPLY' OR POST_TYPE = 'ORIGINAL'); 

-- ENGAGEMENTS TABLE
-- Table for engagements (when a post is liked / reposted)
-- Check engagement type is 'LIKE' or 'REPOST'

CREATE TABLE Engagements (
POST_ID INT(10),  
ENGAGEMENT_ACCOUNT_ID INT(7) NOT NULL,
ENGAGEMENT_TYPE VARCHAR(10), 
ENGAGEMENT_TIME TIME,
ENGAGEMENT_DATE DATE,

FOREIGN KEY (POST_ID) REFERENCES Posts(POST_ID), 
FOREIGN KEY (ENGAGEMENT_ACCOUNT_ID) REFERENCES Accounts(ACCOUNT_ID) 
); 

ALTER TABLE Engagements
ADD CONSTRAINT ENGAGEMENT_TYPE
CHECK (ENGAGEMENT_TYPE = 'LIKE' OR ENGAGEMENT_TYPE = 'REPOST'); 

-- USER_FOLLOWING
-- Table for who is following who 

CREATE TABLE User_Following (
ACCOUNT_ID INT(7) NOT NULL,
FOLLOWING_ACCOUNT_ID INT(7) NOT NULL,
FOREIGN KEY (ACCOUNT_ID) REFERENCES Accounts(ACCOUNT_ID)); 

ALTER TABLE User_Following
ADD FOREIGN KEY (FOLLOWING_ACCOUNT_ID) REFERENCES Accounts(ACCOUNT_ID);

-- USER_PROFILES
-- Table for a user's front-end display information (display name, username, accoount privacy)

CREATE TABLE User_Profiles(
ACCOUNT_ID INT(7) NOT NULL UNIQUE, 
USERNAME VARCHAR(30) NOT NULL UNIQUE, 
DISPLAY_NAME VARCHAR(30) NOT NULL, 
ACCOUNT_PRIVACY BOOLEAN NOT NULL,

FOREIGN KEY (ACCOUNT_ID) REFERENCES Accounts(ACCOUNT_ID) 
); 

-- USERNAME_RECORD
-- Keep record of when users change username

CREATE TABLE Username_Record (
ACCOUNT_ID INT,
NEW_USERNAME VARCHAR(30),
OLD_USERNAME VARCHAR(30),
TIME_LOGGED TIMESTAMP,

FOREIGN KEY (ACCOUNT_ID) REFERENCES Accounts(ACCOUNT_ID));
